#!/usr/bin/env ruby
$:.push File.expand_path("../lib", __FILE__)
require 'punchcard'

#
# CLI Wrapper
#

def available_actions
  PunchCard.new(nil).public_methods(false).reject { |item| item.to_s.end_with?('=') || item.to_s == 'project' }.sort
end

def action_available? action
  available_actions.include? action.to_sym
end

def exit_with_error! msg
  STDERR.puts msg
  exit 1
end

def usage
  "Usage: #{File.basename(__FILE__)} #{available_actions.join('|')} 'Name of my project'"
end

def all action
  require 'csv'
  require 'date'
  puts ["project","status","last active on","total duration","hourly rate","earnings"].to_csv if action == 'csv'
  puts Dir[PunchCard::SETTINGS_DIR+'/*'].map { |file|
    data = CSV.parse(`ruby #{__FILE__} #{action} '#{File.basename(file)}'`).first
    last_activity = !data[2].empty? ? DateTime.parse(data[2]).to_time.to_i : 0
    data.push(last_activity)
    data
  }.sort { |a, b|
    a.last <=> b.last
  }.reverse.map { |row|
    row[0...-1]
  }.map(&:to_csv).join
end

if ARGV.first == 'all'
  all ARGV[1] ? ARGV[1] : 'csv'
  exit
elsif ARGV.first && ['-h', '--help', 'help'].include?(ARGV.first)
  puts usage
  exit
end

selected_action = ARGV[0]
project_name    = ARGV[1]

if selected_action
  if action_available?(selected_action)
    exit_with_error!("2nd argument has to be the project name, e.g.:\n#{usage}") if !project_name && selected_action != 'list'
    punch_card = PunchCard.new project_name
    begin
      arguments = ARGV.drop(2)
      if arguments.size > 0
        puts punch_card.send(selected_action.to_s, *arguments)
      else
        puts punch_card.send(selected_action.to_s)
      end
    rescue PunchCardError => e
      exit_with_error! "Error: #{e.message}"
    end
  else
    exit_with_error! "Unrecognized action '#{selected_action || ''}'\n#{usage}"
  end
end
